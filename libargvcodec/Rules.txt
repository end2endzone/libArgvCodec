  //Samples (tested with cmd.exe):
  //
  //  [command line]                        [arg#1]               [arg#2]                 [arg#3]
  //
  //  aaa"                          =>      aaa
  //  aaa\"                         =>      aaa"
  //  aaa\\"                        =>      aaa\
  //  aaa\\\"                       =>      aaa\"
  //  "aaa\"                        =>      aaa"
  //  "aaa\\"                       =>      aaa\
  //  "aaa\\\"                      =>      aaa\"
  //  a"bc                          =>      abc
  //  a"bc\                         =>      abc\
  //  a"bc\\                        =>      abc\\
  //  a"bc\\\                       =>      abc\\\
  //  a"bc\"d                       =>      abc"d
  //  a"bc\\ ddd" e                 =>      abc\\ ddd             e
  //  a"bc\"\ ddd" e                =>      abc"\ ddd             e
  //  ab\\c d                       =>      ab\\c                 d
  //  ab\\ c                        =>      ab\\                  c
  //  \\ab c                        =>      \\ab                  c
  //  a ""bc\"o" e"                 =>      a                     bc"o e
  //  a "bc\"o" e"                  =>      a                     bc"o                    e
  //  "a"""b                        =>      a"b
  //  "a"""b"                       =>      a"b
  //  "a\"b"                        =>      a"b
  //  "a""" b"                      =>      a"                    b
  //  """                           =>      "
  //  """"                          =>      "
  //  """""                         =>      ""
  //  """"""                        =>      ""
  //  ^"ab cd\^"^&echo foo^"        =>      ab cd"&echo foo
  //   "ab cd\^"^&echo foo^"        =>      ab cd\^&echo          foo
  //  ^"ab cd\^" ee"                =>      ab cd" ee
  //   "ab cd\" ee"                 =>      ab cd" ee
  //   "ab cd\^" ee"                =>      ab cd\^               ee
  //  "a^b" c                       =>      a^b                   c
  //  ^"a^b" c                      =>      ab                    c
  //  ^"ab^" c                      =>      ab                    c
  //  ^"ab^"" c                     =>      ab" c
  //  a \bb c                       =>      a                     \bb                     c
  //  a \"bb c" d                   =>      a                     "bb                     c d
  //  a ^"bb^" c" d                 =>      a                     bb                      c d
  //  a \"b c                       =>      a                     "b                      c
  //  a""b c                        =>      ab                    c
  //  a\"b c                        =>      a"b                   c
  //  "a""b" c                      =>      a"b                   c
  //  "a\"b" c                      =>      a"b                   c
  //  a ^"" b                       =>      a                                             b
  //  a ^"^" b                      =>      a                                             b
  //  ^"" a                         =>                            a
  //  ^"^" a                        =>                            a
  //  ^"test\^"^&whoami^"           =>      test"&whoami
  //  ^"test\\^"^&whoami^"          =>      test\&whoami
  //  ^"test\"^&whoami^"            =>      test"^&whoami^
  //  a\\\\"b                       =>      a\\b
  //  ^"a\\\\"b"                    =>      a\\b
  //  ^"a\^\^\\"b"                  =>      a\\b
  //  ^"a\^\\^\"b"                  =>      a\\b
  //  ^"a\^\\\^"b"                  =>      a\\b
  //
  //                            //older Rules:
  //                            // 1. " character that are encountered starts/ends a string and ommited in output. [NOTE: MUST REVIEW NEXT STATEMENT] If they are juxtaposed to other arguments, they form the same argument.
  //                            // 2. Plain " character must be escaped with \" (or escaped with "") and does not ends the string. (if not escaped, they act as string starts/ends commands. See rule #1). Characters escaped with \" can be seen inside or outside strings but characters escaped with "" can be *ONLY* be seen inside a string.
  //                            // 3. \ character [NOT SURE ABOUT THIS: when inside a string] must be escaped with \\ *ONLY* if they precedes a [NOTE: NOT SURE unescaped] " character. (string or caret-string termination). ie: "te\\\"st" ==> te\"st     "te\\\" st" ==> te\" st
  //                            // 4. \ character must be read as plain text when outside a string.
  //                            // 5. ^ character must be read as plain text when inside a string. (not caret-string) This is also true for all other shell characters.
  //                            // 6. ^" sequence starts/ends a caret-string. Caret-strings can also be terminated with an unescaped " character.
  //                            // 7. " character must be escaped with \^" inside caret-string. [NOTE: THE FOLLOWING MAY BE OMMITED] ........... Only strings that starts with ^" (caret-strings) can interpret ^ as a special meta-character. Normal strings will see ^ as a plain character.
  //                            // 8. ^ characters outside a string (or inside a caret-string) will escape a normal or shell character ( like &,<,>,(,),|,% or ! ) and which will read as plain text. The ^ character can also be ommited to make a known sequence. ie: \\\^" for \\\"
  //                            // 9. [space] or tabs characters act as argument separators when outside a string or caret-string
  //                            //10. Empty arguments must be specified with "" and must not be bounded by separators (except when positioned as the first/last argument)
  //                            //11. All other characters must be read as plain text.
  //                            //12. Inside a caret string, special characters do not need to be escaped. ie: ^"test\"<TIME&whoami^"
  //
  //Rules:
  // 1. [space] or tabs characters are argument delimiters/separators but *ONLY* when outside a string and outside a caret-string.
  //        a b c                       a                     b                       c
  // 1.1. Double quotes character (") starts/ends a string. The " character is omitted from the argument. Strings *may* not always be ended (the end of the command line may be hit without the end-of-string character)
  //      If a string is juxtaposed to another argument (not separated by a delimiter character), they are part of the same argument.
  //        "a b c"                     a b c
  //        a" b" c                     a b                   c
  //        "a "b c                     a b                   c
  // 2. Plain " character must be escaped with \" (or escaped with "") and does not ends the string. (If not escaped, they act as rule #1).
  //    Characters escaped with \" can be seen inside or outside strings but characters escaped with "" can *ONLY* be seen inside a string.
  //        a \"b c                     a                     "b                      c
  //        "a \"b" c                   a "b                  c
  //        "a ""b" c                   a "b                  c
  //        a ""b c                     a                     b                       c
  //        """"                        "
  // 2.1 Plain " character must be escaped with \^" when inside a caret-string.
  //      Note: \^" character sequence can also be visible outside a string.
  //        ^"a \^" b^" c               a " b                 c
  //        ^"a \" b^" c                a " b^                c
  //        a b\^"c                     a                     b"c
  // 3. Plain \ character must be escaped with \\ *ONLY* if they precedes a " character or ^" character sequence. (string or caret-string termination).
  //        a\\b                        a\\b
  //        "a\\b"                      a\\b
  //        a\\"b c                     a\b c
  //        a\\"b c"                    a\b c
  //        "a\\\"b c"                  a\"b c
  //        a\\^"b c                    a\b c
  //        a\\^"b c"                   a\b c
  //        "a\\\^"b c"                 a\\\^b                c
  // 4. ^" sequence starts/ends a caret-string. Caret-strings are different than normal strings. Caret-strings may be ended with an unescaped " character. Caret-string may not be ended.
  //      If a caret-string is juxtaposed to another argument (not separated by a delimiter character), they are part of the same argument.
  //        ^"a b^" c                   a b                   c
  //        ^"a b" c                    a b                   c
  //        ^"a b^"c                    a bc
  //        a^"b c^"                    ab c
  // 5. The following characters are special shell characters:   &,<,>,(,),|,% or !
  // 5.1. Shell characters must be read as plain text when inside a string.
  //        "a < b" c                   a < b                 c
  //        "a ^< b" c                  a ^< b                c
  // 5.2. Plain shell characters must be escaped with ^ when inside a caret-string or outside a string.
  //        a ^< b                      a                     <                       b
  //        ^"a ^< b^" c                a < b                 c
  //        ^"a < b^" c     =>          The system cannot find the file specified.
  //        ^"a & b^" c     =>          'b"' is not recognized as an internal or external command, operable program or batch file.
  //        ^"a &whoami^"   =>          outputs: %USERDOMAIN%\%USERNAME%
  // 5.3 Non-shell characters that are escaped with ^ when inside a caret-string or outside a string must be read as plain characters.
  //        ^a^b ^c                     ab                    c
  //        "^a^b" ^c                   ^a^b
  // 6. Empty arguments must be specified with "" and must be enclosed by argument delimiters or located at the start/end of the command line.
  //    Empty arguments can also be specified with ^"^" or a combination of the two.
  //        a "" b                      a                     [empty]                 c
  //        "" a b                      [empty]               a                       b
  //        a b ""                      a                     b                       [empty]
  //        a ^"^" b                    a                     [empty]                 c
  //        ^"^" a b                    [empty]               a                       b
  //        a b ^"^"                    a                     b                       [empty]
  //        a ^"" b                     a                     [empty]                 c
  //        ^"" a b                     [empty]               a                       b
  //        a b ^""                     a                     b                       [empty]
  // 7. Two juxtaposed strings (not separated by a delimiter character), will insert a plain " character between each other.
  //    This is valid for normal strings, caret-strings, or any combinations.
  //      "a b""c d"                    a b"c d   (as with rule #2)
  //      ^"a b^"^"c d^"                a b"c d
  //      ^"a b^""c d"                  a b"c d
  //      "a b"^"c d^"                  a b"c d
  //      "a b^"^"c d"                  a b^"c d
  // 8. All other characters must be read as plain text.
  // 9. Exceptions:
  // 9.1 \" character sequence inside a caret-string.
  //     Note: This formatting is against rule 2.1.
  //     ^"test\"<test&whoami^"         test"<test&whoami^
  //     \" sequence in caret-string should be read as [close caret-string] and [open string] and plain " character.
  //    Seems to be explained by rule 7.
  // 9.2 OK: RULE 7. ^"" character sequence inside a caret-string.
  //     OK: RULE 7. ^"a ^""<test b^" c             a "<test b^           c
  //     OK: RULE 7. ^"" sequence in caret-string should be read as [close caret-string] and [open string] and plain " character.
  // x. To Validate... 
  //     OK: ^"a " b^" c                    a[space]              b^ c
  //
