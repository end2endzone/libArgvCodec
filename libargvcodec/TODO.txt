DONE! - Rename project to (CommandLineEncoder & ArgumentDecoder) or (ArgumentEncoder, ArgumentDecoder, CommandLineEncoder, CommandLineDecoder)
DONE! - Move global functions of ArgumentManager.cpp out to an utility class (or util.h/cpp files)
DONE! - Change calls like c == '\\' && getSafeCharacter(cmdLine, i+1) == '\\' && getSafeCharacter(cmdLine, i+2) == '\\' && getSafeCharacter(cmdLine, i+3) == '\"'    by isSequence(cmdLine, i, "abcd")
DONE! - Rename getCommandLineArgument() to getEscapedArgument() and make it static like: static std::string getEscapedArgument(const char * iValue)
DONE! - Rename findExpectedCmdLineArguments() to getArgumentsAsSeenByCmd()
DONE! - Implement getArgumentsAsSeenByCreateProcess()
DONE! - Remove usage of ArgumentLister. Create foo.h and foo.cpp that detects from argv[0] if .exe name is "foo.exe" and outputs in foo.exe.log the list of arguments. This way, the foo module can also export functions like getArgumentsAsSeenByCmd()
DONE! - Reconsider reimplementing parseCmdLine() based on samples/rules listed within the function. Create a variable "int backSlashAccumulator" and "int doubleQuoteAccumulator" that accumulates until it sees a " character or the end of the string.
DONE! - Move code into well named classes... Create IArgumentEncoder and the following implementations: CreateProcessArgumentEncoder, CmdPromptArgumentEncoder. Also create ArgumentList class.
DONE!   IArgumentEncoder
DONE!   {
DONE!     std::string encodeArgument(const char * iValue);
DONE!     std::string encodeCommandLine(const ArgumentList & iArguments);
DONE!   }
DONE!   IArgumentDecoder
DONE!   {
DONE!     std::string decodeArgument(const char * iValue);
DONE!     ArgumentList decodeCommandLine(const char * iValue);
DONE!   }
DONE! - Make parseCmdLine(...) static and public
DONE! - Implement the following tests:
DONE!   - testCopyCtor
DONE!   - testOperatorEqual
DONE!   - testAssignmentOperator
DONE! - Extract samples of ArgumentManager::parseCmdLine() as elements of a test case
DONE! - Rename the tool to libcleanargv or libcleanarg, libargvcodec. libargvcodec WINS
DONE! - Implement case insensitive ArgumentList APIs.
DONE! - Implement automatic insertion of the = sign for "-name=value" in the following APIs: extractValue() and findValue()
DONE! - Implement automatic search for expected prefix if "name=value" not found. Search for "/", "-", and "--" expected prefixes.
DONE! - Define all functions into libargvcodec namespace
DONE! - Rename Validator::setOrphanArgumentsAccepted(bool iOrphanArgumentsAccepted); to something more meaningful like setUnknownArgumentAsError(bool)
DONE! - Rename ValidationRule::RESULT::validity to valid
DONE! - Enable all tests
DONE! - Move code which handles command line arguments validation to its own specific library. The code might be deleted later since there are already many argument validation api that already exists.
DONE! - Fix issues about warning C4251: 'libargvcodec::validation::ValidationRuleSorter::mBoolInstances' : class 'std::vector<_Ty>' needs to have dll-interface to be used by clients of class 'libargvcodec::validation::ValidationRuleSorter'
DONE! - Move code in libargvcodecvalidator under its own namespace
DONE! - Create a command line project which ask for arguments and outputs the full command line.
DONE! - Add LGPL license file.
- Add support for validating arguments againts an argument list specification. This will allow users to specify the argument format/names/meaning and ask the manager to validate the given arguments against this specification. If will also provide a custom error message for invalid/missing arguments.
- Code cleanup: Delete libargvcodec.TODO.txt and Rules.txt
- Code cleanup: Delete libargvcodecvalidator project
- Code cleanup: Delete libargvcodectest.TestValidator.*
- Create a packager project: create a zip file. Do not include References.
