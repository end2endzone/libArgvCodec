- Think about removing the argument parsing code and replace by apache commons cli (http://commons.apache.org/cli/).
- Replace `installer` content by NSIS feeded by CMake's project properties.

- Add support for validating arguments againts an argument list specification. This will allow users to specify the argument format/names/meaning and ask the manager to validate the given arguments against this specification. If will also provide a custom error message for invalid/missing arguments.
- Code cleanup: Delete libargvcodec.TODO.txt and Rules.txt
- Code cleanup: Delete libargvcodecvalidator project
- Code cleanup: Delete libargvcodectest.TestValidator.*

    std::string url, username, password;
    while(arguments.read("--login",url, username, password))
    {
…
    }
 
Arguments.read(…) should have a string prototype and an inline template for all c++ types of arguments?
 
Add support for ant property like arguments:  -Dbuild.config=test
Add support for bool ArgumentList::isHelpRequested() which looks for “/?”, or “-help” or “--help" arguments.
 
Create a Usage class with the following methods:
·         void setApplicationName(const char * iName)
·         const char * getApplicationName() const
·         void setApplicationDescription(const char * iApplicationDescription);
·         const char * getApplicationDescription() const;
·         void setOptionsPrefix(const char * iValue) //could be - / -- or NULL
·         const char * getOptionsPrefix() const
·         void addFlagOption(const char * iName, const char * iDescription); //ie: --quiet or --verbose
·         void addValueOption(const char * iName, const char * iDescription); //ie: count=5
·         //void addNameValuePairOption(const char * iPrefix, const char * iDescription); //ie: -Dbuild.config=debug -Dcolor=blue
·         void addPropertyOption(const char * iPrefix, const char * iDescription); //ie: -Dbuild.config=debug -Dcolor=blue
·         void addParameterizedOption(const char * iName, int iNumParameters, const char * iDescription) //ie: --window 0 0 640 480
·         void setParameterOptionDescription(const char * iName, int iParameterIndex, const char * iDescription);
·         void addListOption(const char * iName); //ie: --inputfiles foo.txt bar.csv […] apple.pdf
·         void show(); //output all usage and options to the console
·         std::string getUsageString() //output a multi-line string that contains all usage and options. Useful for GUI application
·         int getNumOptions() const;
·         void const OptionDescriptor * getOption(int iIndex) const;
·         struct OptionDescriptor
o   {
o   std::string name;
o   std::string description;
o   bool isMandatory;
o   bool isFlag;
o   bool isValue;
o   bool isProperty;
o   //bool isNameValuePair;
o   int numParameters;
o   bool isRepeatable;
o   }
 
bool Validator.validate(arguments, usage)





Use the apache commons cli (http://commons.apache.org/cli/) if you plan on extending that past a single arg.
"The Apache Commons CLI library provides an API for parsing command line options passed to programs. It's also able to print help messages detailing the options available for a command line tool."

Commons CLI supports different types of options:

·         POSIX like options (ie. tar -zxvf foo.tar.gz)

·         GNU like long options (ie. du --human-readable --max-depth=1)

·         Java like properties (ie. java -Djava.awt.headless=true -Djava.net.useSystemProxies=true Foo)

·         Short options with value attached (ie. gcc -O2 foo.c)

·         long options with single hyphen (ie. ant -projecthelp)